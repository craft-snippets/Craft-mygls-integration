<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js@9.0.1/public/assets/styles/choices.min.css"/>
<script src="https://cdn.jsdelivr.net/npm/choices.js@9.0.1/public/assets/scripts/choices.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fuse.js@7.1.0"></script>

{#<script>#}
{#    var options = [#}
{#        {"id":"10000-GLSGENERAL02","goldId":3692,"name":"GLS - ARROWS TRANSPORT (D10)","contact":{"countryCode":"HR","postalCode":"10255","city":"Donji Stupnik","address":"D10 - Stupničke Šipkovine 22 / Paket Shop"},"location":[45.752,15.8734],"hours":[[1,"10:00","18:00"],[2,"10:00","18:00"],[3,"10:00","18:00"],[4,"10:00","18:00"],[5,"10:00","18:00"]],"features":["acceptsCash","pickup","delivery"],"pickupTime":"19:00","type":"parcel-shop","externalId":"103692","hasWheelchairAccess":false},{"id":"10298-GLSGENERAL","goldId":4783,"name":"GLS - DAVID PRIJEVOZ (D11)","contact":{"countryCode":"HR","postalCode":"10298","city":"Donja Bistra","address":"STUBIČKA 458"},"location":[45.8992,15.8557],"hours":[[1,"08:00","16:00"],[2,"08:00","16:00"],[3,"08:00","16:00"],[4,"08:00","16:00"],[5,"08:00","16:00"]],"features":["acceptsCash","pickup","delivery"],"pickupTime":"16:00","type":"parcel-shop","externalId":"104783","hasWheelchairAccess":false}#}
{#    ];#}
{#</script>#}

<div data-parcel-shop-plugin="{{ pluginHandle }}">
    <input type="hidden" name="shipment-info[plugin-handle]" value="{{ pluginHandle }}">
    <select
        data-parcel-shop-code="{{ craft.shippingToolbox.getOrderSavedShipmentProperty(order, pluginHandle, 'parcelShopCode') }}"
        name="{{ craft.shippingToolbox.shipmentInfoParamName('parcelShopCode', pluginHandle) }}"
    ></select>
    <input
        type="hidden"
        name="{{ craft.shippingToolbox.shipmentInfoParamName('parcelShopName', pluginHandle) }}"
        value="{{ craft.shippingToolbox.getOrderSavedShipmentProperty(order, pluginHandle, 'parcelShopName') }}"
        data-parcel-shop-name
    >
</div>
<script>
(function(){
fetch('https://map.gls-hungary.com/data/deliveryPoints/hr.json')
    .then(response => response.json())
    .then(data => {

    const options = data.items;

    const selectElement = document.querySelector('[data-parcel-shop-plugin="{{ pluginHandle }}"] [data-parcel-shop-code]');
    const nameElement = document.querySelector('[data-parcel-shop-plugin="{{ pluginHandle }}"] [data-parcel-shop-name]');
    const preselectedValue = selectElement.getAttribute('data-parcel-shop-code');

    // Initialize Choices.js
    const choices = new Choices(selectElement, {
        searchEnabled: true,
        searchResultLimit: 5,
        searchPlaceholderValue: '{{ 'Search by parcel shop name, city or postal code.'|t }}',
    });

    // Transform options for Choices.js
    const formattedOptions = options.map(opt => ({
        value: opt.id,
        label: `${opt.name} - ${opt.id}`,
        customProperties: { postalCode: opt.contact.postalCode, city: opt.contact.city }
    }));

    // set parcel shop name input
    choices.passedElement.element.addEventListener(
        'choice',
        function(event) {
            code = event.detail.choice.value;
            const matchingOption = formattedOptions.find(opt => opt.value === code);

            if (matchingOption) {
                label = matchingOption.label;
                nameElement.value = label;
            }
        },
        false,
    );

    // Load options into Choices.js
    choices.setChoices(formattedOptions, 'value', 'label', true);

    if (preselectedValue) {
        const matchingOption = formattedOptions.find(opt => opt.value === preselectedValue);
        if (matchingOption) {
            choices.setChoiceByValue(preselectedValue);
        }
    }

    // Initialize Fuse.js with correct search keys
    const fuse = new Fuse(options, {
        keys: ['name', 'contact.postalCode', 'contact.city'], // Search on `name` and `contact.city`
        threshold: 0.3
    });

    // Handle search event
    selectElement.addEventListener('search', (event) => {
        const searchText = event.detail.value.trim();

        if (searchText.length === 0) {
            // Reset to original options when search is cleared
            choices.clearChoices();
            choices.setChoices(formattedOptions, 'value', 'label', true);
            return;
        }

        // Perform search in Fuse.js
        const results = fuse.search(searchText).map(result => result.item);

        // Clear and update Choices.js dropdown
        choices.clearChoices();
        choices.setChoices(results.map(opt => ({
            value: opt.id,
            label: `${opt.name} - ${opt.id}`,
            customProperties: { postalCode: opt.contact.postalCode, city: opt.contact.city }
        })), 'value', 'label', true);
    });

})
.catch(error => console.error('Error loading data:', error));
})();
</script>